<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0"
         DefaultTargets="ToolsPipeline_Deploy_PushTo_Consul_KV_Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Defines whether the current script file has been loaded / imported or not -->
        <ExistsDeployPushToConsulKV>true</ExistsDeployPushToConsulKV>

        <MsBuildTasksAssembly>$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</MsBuildTasksAssembly>
        <MsBuildTasksAssembly Condition="!Exists('$(MsBuildTasksAssembly)')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</MsBuildTasksAssembly>
    </PropertyGroup>
    <PropertyGroup>
        <ShouldLoadConsulKVFilesToPush>true</ShouldLoadConsulKVFilesToPush>
        <ShouldLoadTemplateTokens>true</ShouldLoadTemplateTokens>
        <ShouldLoadTemplateVersion>true</ShouldLoadTemplateVersion>
        <ShouldLoadSystemTemplateVersion>true</ShouldLoadSystemTemplateVersion>
    </PropertyGroup>

    <Import
        Condition="Exists('$(FileImports)') AND '$(ExistsFileImports)' != 'true' "
        Project="$(FileImports)" />

    <Target
        Condition=" '@(ConsulKVFilesToPush)' != '' "
        Name="ToolsPipeline_Deploy_PushTo_Consul_KV_Run"
        Outputs="%(ConsulKVFilesToPush.Identity)">
        <CreateProperty Value="%(ConsulKVFilesToPush.FullPath)">
            <Output
                PropertyName="FileToUpload"
                TaskParameter="Value" />
        </CreateProperty>
        <CreateProperty Value="$([MSBuild]::MakeRelative($(DirBuildTemp), $(FileToUpload)))">
            <Output
                PropertyName="RelativePath"
                TaskParameter="Value" />
        </CreateProperty>
        <CreateProperty Value="$(RelativePath.Replace('\', '/'))">
            <Output
                PropertyName="Key"
                TaskParameter="Value" />
        </CreateProperty>

        <ToolsPipeline_Deploy_PushTo_Consul_KV_LocalTask_Upload
            Address="http://localhost:8500"
            Datacenter="$(Datacenter)"
            FilePath="$(FileToUpload)"
            Key="$(Key)"/>
    </Target>

    <!--
        In order to prevent this task from ever colliding with any of the inline tasks defined elsewhere we'll give it
        a name that is unlikely ever to be used elsewhere (yay poor-mans namespaces?).
    -->
    <UsingTask
        AssemblyFile="$(MsBuildTasksAssembly)"
        TaskFactory="CodeTaskFactory"
        TaskName="ToolsPipeline_Deploy_PushTo_Consul_KV_LocalTask_Upload">
        <ParameterGroup>
            <Address
                ParameterType="System.String"
                Required="true" />
            <Datacenter
                ParameterType="System.String"
                Required="true"/>
            <FilePath
                ParameterType="System.String"
                Required="true" />
            <Key
                ParameterType="System.String"
                Required="true" />
        </ParameterGroup>
        <Task>
            <Code
                Language="cs"
                Type="Method">
                <![CDATA[
                    public override bool Execute()
                    {
                        string content = null;
                        using (var reader = new System.IO.StreamReader(FilePath))
                        {
                            content = reader.ReadToEnd();
                        }

                        if (!string.IsNullOrWhiteSpace(content))
                        {
                            using (var client = new System.Net.WebClient())
                            {
                                var address = string.Format(
                                    System.Globalization.CultureInfo.InvariantCulture,
                                    "{0}/v1/kv/{1}?dc={2}",
                                    Address,
                                    Key,
                                    Datacenter);

                                Log.LogMessage(
                                    string.Format(
                                    System.Globalization.CultureInfo.InvariantCulture,
                                    "Uploading contents of '{0}' to {1}",
                                    FilePath,
                                    address));
                                var bytes = Encoding.UTF8.GetBytes(content);
                                client.UploadData(address, "PUT", bytes);
                            }
                        }

                        // Log.HasLoggedErrors is true if the task logged any errors -- even if they were logged
                        // from a task's constructor or property setter. As long as this task is written to always log an error
                        // when it fails, we can reliably return HasLoggedErrors.
                        return !Log.HasLoggedErrors;
                    }
                ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>
